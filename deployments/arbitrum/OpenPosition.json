{
  "address": "0xc4AEe80B5E79C2eB942f0f5342a4663d1c3E969D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rfqId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "partyA",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "partyB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountUnits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "avgPriceUsd",
          "type": "uint256"
        }
      ],
      "name": "OpenPosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rfqId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "partyA",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "partyB",
          "type": "address"
        }
      ],
      "name": "RequestForQuoteCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rfqId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "partyA",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "partyB",
          "type": "address"
        }
      ],
      "name": "RequestForQuoteNew",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rfqId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "filledAmountUnits",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "avgPriceUsd",
          "type": "uint256"
        },
        {
          "internalType": "bytes16",
          "name": "uuid",
          "type": "bytes16"
        },
        {
          "internalType": "uint256",
          "name": "lockedMarginB",
          "type": "uint256"
        }
      ],
      "name": "openPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "creationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mutableTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionId",
              "type": "uint256"
            },
            {
              "internalType": "bytes16",
              "name": "uuid",
              "type": "bytes16"
            },
            {
              "internalType": "enum PositionState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "enum PositionType",
              "name": "positionType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "marketId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "partyA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "partyB",
              "type": "address"
            },
            {
              "internalType": "enum Side",
              "name": "side",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "lockedMarginA",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedMarginB",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolFeePaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cva",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentBalanceUnits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialNotionalUsd",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "affiliate",
              "type": "address"
            }
          ],
          "internalType": "struct Position",
          "name": "position",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x09a1d8614b5ee3f9f28aebe760b298c688f005845716ba060d927b73bd6118bb",
  "receipt": {
    "to": null,
    "from": "0xeB73A6fB886c9e4C01F29da7B239e6E4Db0bf3aF",
    "contractAddress": "0xc4AEe80B5E79C2eB942f0f5342a4663d1c3E969D",
    "transactionIndex": 1,
    "gasUsed": "5900485",
    "logsBloom": "0x
    "blockHash": "0x600ffba07988ccb8d1d78e36faf44fda3fb11c99ddf287f0027e96fbdb9b0b5d",
    "transactionHash": "0x09a1d8614b5ee3f9f28aebe760b298c688f005845716ba060d927b73bd6118bb",
    "logs": [],
    "blockNumber": 52130273,
    "cumulativeGasUsed": "5900485",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "eca260ea03499fe82b9da899a9ca025d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rfqId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"partyA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"partyB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"avgPriceUsd\",\"type\":\"uint256\"}],\"name\":\"OpenPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rfqId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"partyA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"partyB\",\"type\":\"address\"}],\"name\":\"RequestForQuoteCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rfqId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"partyA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"partyB\",\"type\":\"address\"}],\"name\":\"RequestForQuoteNew\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rfqId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"filledAmountUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avgPriceUsd\",\"type\":\"uint256\"},{\"internalType\":\"bytes16\",\"name\":\"uuid\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"lockedMarginB\",\"type\":\"uint256\"}],\"name\":\"openPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mutableTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes16\",\"name\":\"uuid\",\"type\":\"bytes16\"},{\"internalType\":\"enum PositionState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"enum PositionType\",\"name\":\"positionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"partyA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partyB\",\"type\":\"address\"},{\"internalType\":\"enum Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lockedMarginA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedMarginB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFeePaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cva\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBalanceUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialNotionalUsd\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"}],\"internalType\":\"struct Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/master-agreement/trading/OpenPosition.sol\":\"OpenPosition\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/constants/ConstantsInternal.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport { Decimal } from \\\"../libraries/LibDecimal.sol\\\";\\r\\nimport { ConstantsStorage } from \\\"./ConstantsStorage.sol\\\";\\r\\nimport { IConstantsEvents } from \\\"./IConstantsEvents.sol\\\";\\r\\n\\r\\nlibrary ConstantsInternal {\\r\\n    using ConstantsStorage for ConstantsStorage.Layout;\\r\\n    using Decimal for Decimal.D256;\\r\\n\\r\\n    uint256 private constant PERCENT_BASE = 1e18;\\r\\n    uint256 private constant PRECISION = 1e18;\\r\\n\\r\\n    /* ========== VIEWS ========== */\\r\\n\\r\\n    function getPrecision() internal pure returns (uint256) {\\r\\n        return PRECISION;\\r\\n    }\\r\\n\\r\\n    function getPercentBase() internal pure returns (uint256) {\\r\\n        return PERCENT_BASE;\\r\\n    }\\r\\n\\r\\n    function getCollateral() internal view returns (address) {\\r\\n        return ConstantsStorage.layout().collateral;\\r\\n    }\\r\\n\\r\\n    function getLiquidationFee() internal view returns (Decimal.D256 memory) {\\r\\n        return Decimal.ratio(ConstantsStorage.layout().liquidationFee, PERCENT_BASE);\\r\\n    }\\r\\n\\r\\n    function getProtocolLiquidationShare() internal view returns (Decimal.D256 memory) {\\r\\n        return Decimal.ratio(ConstantsStorage.layout().protocolLiquidationShare, PERCENT_BASE);\\r\\n    }\\r\\n\\r\\n    function getCVA() internal view returns (Decimal.D256 memory) {\\r\\n        return Decimal.ratio(ConstantsStorage.layout().cva, PERCENT_BASE);\\r\\n    }\\r\\n\\r\\n    function getRequestTimeout() internal view returns (uint256) {\\r\\n        return ConstantsStorage.layout().requestTimeout;\\r\\n    }\\r\\n\\r\\n    function getMaxOpenPositionsCross() internal view returns (uint256) {\\r\\n        return ConstantsStorage.layout().maxOpenPositionsCross;\\r\\n    }\\r\\n\\r\\n    /* ========== SETTERS ========== */\\r\\n\\r\\n    function setCollateral(address collateral) internal {\\r\\n        ConstantsStorage.layout().collateral = collateral;\\r\\n    }\\r\\n\\r\\n    function setLiquidationFee(uint256 liquidationFee) internal {\\r\\n        ConstantsStorage.layout().liquidationFee = liquidationFee;\\r\\n    }\\r\\n\\r\\n    function setProtocolLiquidationShare(uint256 protocolLiquidationShare) internal {\\r\\n        ConstantsStorage.layout().protocolLiquidationShare = protocolLiquidationShare;\\r\\n    }\\r\\n\\r\\n    function setCVA(uint256 cva) internal {\\r\\n        ConstantsStorage.layout().cva = cva;\\r\\n    }\\r\\n\\r\\n    function setRequestTimeout(uint256 requestTimeout) internal {\\r\\n        ConstantsStorage.layout().requestTimeout = requestTimeout;\\r\\n    }\\r\\n\\r\\n    function setMaxOpenPositionsCross(uint256 maxOpenPositionsCross) internal {\\r\\n        ConstantsStorage.layout().maxOpenPositionsCross = maxOpenPositionsCross;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2cfd838c49a4c1e59f64b2a006ea74fbfcf98a376350bb0b1130150b9cee5806\",\"license\":\"BUSL-1.1\"},\"contracts/constants/ConstantsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nlibrary ConstantsStorage {\\r\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"diamond.standard.constants.storage\\\");\\r\\n\\r\\n    struct Layout {\\r\\n        address collateral;\\r\\n        uint256 liquidationFee;\\r\\n        uint256 protocolLiquidationShare;\\r\\n        uint256 cva;\\r\\n        uint256 requestTimeout;\\r\\n        uint256 maxOpenPositionsCross;\\r\\n    }\\r\\n\\r\\n    function layout() internal pure returns (Layout storage l) {\\r\\n        bytes32 slot = STORAGE_SLOT;\\r\\n        assembly {\\r\\n            l.slot := slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x95ca5941aa95afe59bee8f04990cb8bcb0eafb0e277a0f53fada8397e53c2baf\",\"license\":\"BUSL-1.1\"},\"contracts/constants/IConstantsEvents.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\ninterface IConstantsEvents {\\r\\n    event SetCollateral(address oldAddress, address newAddress);\\r\\n    event SetLiquidationFee(uint256 oldFee, uint256 newFee);\\r\\n    event SetProtocolLiquidationShare(uint256 oldShare, uint256 newShare);\\r\\n    event SetCVA(uint256 oldCVA, uint256 newCVA);\\r\\n    event SetRequestTimeout(uint256 oldTimeout, uint256 newTimeout);\\r\\n    event SetMaxOpenPositionsCross(uint256 oldMax, uint256 newMax);\\r\\n}\\r\\n\",\"keccak256\":\"0x556ffdc7440aa7317b606497a3ada3e6e71faa64d2ad3da56fd8f6591b289745\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/LibDecimal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Decimal\\r\\n * @author dYdX\\r\\n *\\r\\n * Library that defines a fixed-point number with 18 decimal places.\\r\\n */\\r\\nlibrary Decimal {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // ============ Constants ============\\r\\n\\r\\n    uint256 constant BASE = 10 ** 18;\\r\\n\\r\\n    // ============ Structs ============\\r\\n\\r\\n    struct D256 {\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    // ============ Static Functions ============\\r\\n\\r\\n    function zero() internal pure returns (D256 memory) {\\r\\n        return D256({ value: 0 });\\r\\n    }\\r\\n\\r\\n    function one() internal pure returns (D256 memory) {\\r\\n        return D256({ value: BASE });\\r\\n    }\\r\\n\\r\\n    function from(uint256 a) internal pure returns (D256 memory) {\\r\\n        return D256({ value: a.mul(BASE) });\\r\\n    }\\r\\n\\r\\n    function ratio(uint256 a, uint256 b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: getPartial(a, BASE, b) });\\r\\n    }\\r\\n\\r\\n    // ============ Self Functions ============\\r\\n\\r\\n    function add(D256 memory self, uint256 b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: self.value.add(b.mul(BASE)) });\\r\\n    }\\r\\n\\r\\n    function sub(D256 memory self, uint256 b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: self.value.sub(b.mul(BASE)) });\\r\\n    }\\r\\n\\r\\n    function sub(D256 memory self, uint256 b, string memory reason) internal pure returns (D256 memory) {\\r\\n        return D256({ value: self.value.sub(b.mul(BASE), reason) });\\r\\n    }\\r\\n\\r\\n    function mul(D256 memory self, uint256 b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: self.value.mul(b) });\\r\\n    }\\r\\n\\r\\n    function div(D256 memory self, uint256 b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: self.value.div(b) });\\r\\n    }\\r\\n\\r\\n    function pow(D256 memory self, uint256 b) internal pure returns (D256 memory) {\\r\\n        if (b == 0) {\\r\\n            return one();\\r\\n        }\\r\\n\\r\\n        D256 memory temp = D256({ value: self.value });\\r\\n        for (uint256 i = 1; i < b; ++i) {\\r\\n            temp = mul(temp, self);\\r\\n        }\\r\\n\\r\\n        return temp;\\r\\n    }\\r\\n\\r\\n    function add(D256 memory self, D256 memory b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: self.value.add(b.value) });\\r\\n    }\\r\\n\\r\\n    function sub(D256 memory self, D256 memory b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: self.value.sub(b.value) });\\r\\n    }\\r\\n\\r\\n    function sub(D256 memory self, D256 memory b, string memory reason) internal pure returns (D256 memory) {\\r\\n        return D256({ value: self.value.sub(b.value, reason) });\\r\\n    }\\r\\n\\r\\n    function mul(D256 memory self, D256 memory b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: getPartial(self.value, b.value, BASE) });\\r\\n    }\\r\\n\\r\\n    function div(D256 memory self, D256 memory b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: getPartial(self.value, BASE, b.value) });\\r\\n    }\\r\\n\\r\\n    function equals(D256 memory self, D256 memory b) internal pure returns (bool) {\\r\\n        return self.value == b.value;\\r\\n    }\\r\\n\\r\\n    function greaterThan(D256 memory self, D256 memory b) internal pure returns (bool) {\\r\\n        return compareTo(self, b) == 2;\\r\\n    }\\r\\n\\r\\n    function lessThan(D256 memory self, D256 memory b) internal pure returns (bool) {\\r\\n        return compareTo(self, b) == 0;\\r\\n    }\\r\\n\\r\\n    function greaterThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {\\r\\n        return compareTo(self, b) > 0;\\r\\n    }\\r\\n\\r\\n    function lessThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {\\r\\n        return compareTo(self, b) < 2;\\r\\n    }\\r\\n\\r\\n    function isZero(D256 memory self) internal pure returns (bool) {\\r\\n        return self.value == 0;\\r\\n    }\\r\\n\\r\\n    function asUint256(D256 memory self) internal pure returns (uint256) {\\r\\n        return self.value.div(BASE);\\r\\n    }\\r\\n\\r\\n    // ============ Core Methods ============\\r\\n\\r\\n    function getPartial(uint256 target, uint256 numerator, uint256 denominator) private pure returns (uint256) {\\r\\n        return target.mul(numerator).div(denominator);\\r\\n    }\\r\\n\\r\\n    function compareTo(D256 memory a, D256 memory b) private pure returns (uint256) {\\r\\n        if (a.value == b.value) {\\r\\n            return 1;\\r\\n        }\\r\\n        return a.value > b.value ? 2 : 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfa323074357185fffcd95c964c95e25fbba23f2ac0fd542ea23333721457f3d5\",\"license\":\"MIT\"},\"contracts/libraries/LibEnums.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nenum MarketType {\\r\\n    FOREX,\\r\\n    METALS,\\r\\n    ENERGIES,\\r\\n    INDICES,\\r\\n    STOCKS,\\r\\n    COMMODITIES,\\r\\n    BONDS,\\r\\n    ETFS,\\r\\n    CRYPTO\\r\\n}\\r\\n\\r\\nenum Side {\\r\\n    BUY,\\r\\n    SELL\\r\\n}\\r\\n\\r\\nenum HedgerMode {\\r\\n    SINGLE,\\r\\n    HYBRID,\\r\\n    AUTO\\r\\n}\\r\\n\\r\\nenum OrderType {\\r\\n    LIMIT,\\r\\n    MARKET\\r\\n}\\r\\n\\r\\nenum PositionType {\\r\\n    ISOLATED,\\r\\n    CROSS\\r\\n}\\r\\n\",\"keccak256\":\"0xbedbd913c1366fd4d16201404d7cc37f9e662311ff71e9fff1cd1003ef91f03f\",\"license\":\"BUSL-1.1\"},\"contracts/markets/MarketsInternal.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport { Decimal } from \\\"../libraries/LibDecimal.sol\\\";\\r\\nimport { ConstantsInternal } from \\\"../constants/ConstantsInternal.sol\\\";\\r\\nimport { MarketsStorage, Market } from \\\"./MarketsStorage.sol\\\";\\r\\nimport { MasterStorage } from \\\"../master-agreement/MasterStorage.sol\\\";\\r\\n\\r\\nlibrary MarketsInternal {\\r\\n    using MarketsStorage for MarketsStorage.Layout;\\r\\n    using MasterStorage for MasterStorage.Layout;\\r\\n    using Decimal for Decimal.D256;\\r\\n\\r\\n    /* ========== VIEWS ========== */\\r\\n\\r\\n    function getMarkets() internal view returns (Market[] memory markets) {\\r\\n        return MarketsStorage.layout().marketList;\\r\\n    }\\r\\n\\r\\n    function getMarketById(uint256 marketId) internal view returns (Market memory market) {\\r\\n        return MarketsStorage.layout().marketMap[marketId];\\r\\n    }\\r\\n\\r\\n    function getMarketsByIds(uint256[] memory marketIds) internal view returns (Market[] memory markets) {\\r\\n        markets = new Market[](marketIds.length);\\r\\n        for (uint256 i = 0; i < marketIds.length; i++) {\\r\\n            markets[i] = MarketsStorage.layout().marketMap[marketIds[i]];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getMarketsInRange(uint256 start, uint256 end) internal view returns (Market[] memory markets) {\\r\\n        uint256 length = end - start;\\r\\n        markets = new Market[](length);\\r\\n\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            markets[i] = MarketsStorage.layout().marketList[start + i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getMarketsLength() internal view returns (uint256 length) {\\r\\n        return MarketsStorage.layout().marketList.length;\\r\\n    }\\r\\n\\r\\n    function getMarketFromPositionId(uint256 positionId) internal view returns (Market memory market) {\\r\\n        uint256 marketId = MasterStorage.layout().allPositionsMap[positionId].marketId;\\r\\n        market = MarketsStorage.layout().marketMap[marketId];\\r\\n    }\\r\\n\\r\\n    function getMarketsFromPositionIds(uint256[] calldata positionIds) internal view returns (Market[] memory markets) {\\r\\n        markets = new Market[](positionIds.length);\\r\\n        for (uint256 i = 0; i < positionIds.length; i++) {\\r\\n            uint256 marketId = MasterStorage.layout().allPositionsMap[positionIds[i]].marketId;\\r\\n            markets[i] = MarketsStorage.layout().marketMap[marketId];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getMarketProtocolFee(uint256 marketId) internal view returns (Decimal.D256 memory) {\\r\\n        uint256 fee = MarketsStorage.layout().marketMap[marketId].protocolFee;\\r\\n        return Decimal.ratio(fee, ConstantsInternal.getPercentBase());\\r\\n    }\\r\\n\\r\\n    function isValidMarketId(uint256 marketId) internal pure returns (bool) {\\r\\n        return marketId > 0;\\r\\n    }\\r\\n\\r\\n    function isActiveMarket(uint256 marketId) internal view returns (bool) {\\r\\n        return MarketsStorage.layout().marketMap[marketId].active;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x67254b706dbe914ce93051221ea3cf451e952a69ffda0f21a09e8503ce992e7f\",\"license\":\"BUSL-1.1\"},\"contracts/markets/MarketsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport { MarketType } from \\\"../libraries/LibEnums.sol\\\";\\r\\n\\r\\nstruct Market {\\r\\n    uint256 marketId;\\r\\n    string identifier;\\r\\n    MarketType marketType;\\r\\n    bool active;\\r\\n    string baseCurrency;\\r\\n    string quoteCurrency;\\r\\n    string symbol;\\r\\n    bytes32 muonPriceFeedId;\\r\\n    bytes32 fundingRateId;\\r\\n    uint256 protocolFee;\\r\\n}\\r\\n\\r\\nlibrary MarketsStorage {\\r\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"diamond.standard.markets.storage\\\");\\r\\n\\r\\n    struct Layout {\\r\\n        mapping(uint256 => Market) marketMap;\\r\\n        Market[] marketList;\\r\\n    }\\r\\n\\r\\n    function layout() internal pure returns (Layout storage l) {\\r\\n        bytes32 slot = STORAGE_SLOT;\\r\\n        assembly {\\r\\n            l.slot := slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5e360238be1f82158114f4077a304abfdf950831638affa193270da06daad288\",\"license\":\"BUSL-1.1\"},\"contracts/master-agreement/MasterCalculators.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport { Side } from \\\"../libraries/LibEnums.sol\\\";\\r\\nimport { Decimal } from \\\"../libraries/LibDecimal.sol\\\";\\r\\nimport { PositionPrice } from \\\"../oracle/OracleStorage.sol\\\";\\r\\nimport { ConstantsInternal } from \\\"../constants/ConstantsInternal.sol\\\";\\r\\nimport { MarketsInternal } from \\\"../markets/MarketsInternal.sol\\\";\\r\\nimport { MasterStorage, Position } from \\\"./MasterStorage.sol\\\";\\r\\n\\r\\nlibrary MasterCalculators {\\r\\n    using Decimal for Decimal.D256;\\r\\n    using MasterStorage for MasterStorage.Layout;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the UPnL for a specific position.\\r\\n     * @dev This is a naive function, inputs can not be trusted. Use cautiously.\\r\\n     */\\r\\n    function calculateUPnLIsolated(\\r\\n        uint256 positionId,\\r\\n        uint256 bidPrice,\\r\\n        uint256 askPrice\\r\\n    ) internal view returns (int256 uPnLA, int256 uPnLB) {\\r\\n        MasterStorage.Layout storage s = MasterStorage.layout();\\r\\n        Position memory position = s.allPositionsMap[positionId];\\r\\n\\r\\n        (uPnLA, uPnLB) = _calculateUPnLIsolated(\\r\\n            position.side,\\r\\n            position.currentBalanceUnits,\\r\\n            position.initialNotionalUsd,\\r\\n            bidPrice,\\r\\n            askPrice\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the UPnL of a party across all his open positions.\\r\\n     * @dev This is a naive function, inputs can NOT be trusted. Use cautiously.\\r\\n     *      Use Muon to verify inputs to prevent expensive computational costs.\\r\\n     * @dev positionPrices can have an incorrect length.\\r\\n     * @dev positionPrices can have an arbitrary order.\\r\\n     * @dev positionPrices can contain forged duplicates.\\r\\n     */\\r\\n    function calculateUPnLCross(\\r\\n        PositionPrice[] memory positionPrices,\\r\\n        address party\\r\\n    ) internal view returns (int256 uPnLCross) {\\r\\n        return _calculateUPnLCross(positionPrices, party);\\r\\n    }\\r\\n\\r\\n    function calculateProtocolFeeAmount(uint256 marketId, uint256 notionalUsd) internal view returns (uint256) {\\r\\n        return Decimal.from(notionalUsd).mul(MarketsInternal.getMarketProtocolFee(marketId)).asUint256();\\r\\n    }\\r\\n\\r\\n    function calculateLiquidationFeeAmount(uint256 notionalUsd) internal view returns (uint256) {\\r\\n        return Decimal.from(notionalUsd).mul(ConstantsInternal.getLiquidationFee()).asUint256();\\r\\n    }\\r\\n\\r\\n    function calculateCVAAmount(uint256 notionalSize) internal view returns (uint256) {\\r\\n        return Decimal.from(notionalSize).mul(ConstantsInternal.getCVA()).asUint256();\\r\\n    }\\r\\n\\r\\n    function calculateCrossMarginHealth(\\r\\n        address party,\\r\\n        int256 uPnLCross\\r\\n    ) internal view returns (Decimal.D256 memory ratio) {\\r\\n        MasterStorage.Layout storage s = MasterStorage.layout();\\r\\n\\r\\n        uint256 lockedMargin = s.crossLockedMargin[party];\\r\\n        uint256 openPositions = s.openPositionsCrossLength[party];\\r\\n\\r\\n        if (lockedMargin == 0 && openPositions == 0) {\\r\\n            return Decimal.ratio(1, 1);\\r\\n        } else if (lockedMargin == 0) {\\r\\n            return Decimal.zero();\\r\\n        }\\r\\n\\r\\n        if (uPnLCross >= 0) {\\r\\n            return Decimal.ratio(lockedMargin + uint256(uPnLCross), lockedMargin);\\r\\n        }\\r\\n\\r\\n        uint256 pnl = uint256(-uPnLCross);\\r\\n        if (pnl >= lockedMargin) {\\r\\n            return Decimal.zero();\\r\\n        }\\r\\n\\r\\n        ratio = Decimal.ratio(lockedMargin - pnl, lockedMargin);\\r\\n    }\\r\\n\\r\\n    /* ========== PRIVATE ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the UPnL for a specific position.\\r\\n     * @dev This is a naive function, inputs can not be trusted. Use cautiously.\\r\\n     */\\r\\n    function _calculateUPnLIsolated(\\r\\n        Side side,\\r\\n        uint256 currentBalanceUnits,\\r\\n        uint256 initialNotionalUsd,\\r\\n        uint256 bidPrice,\\r\\n        uint256 askPrice\\r\\n    ) private pure returns (int256 uPnLA, int256 uPnLB) {\\r\\n        if (currentBalanceUnits == 0) return (0, 0);\\r\\n\\r\\n        uint256 precision = ConstantsInternal.getPrecision();\\r\\n        if (side == Side.BUY) {\\r\\n            require(bidPrice != 0, \\\"Oracle bidPrice is invalid\\\");\\r\\n            int256 notionalIsolatedA = int256((currentBalanceUnits * bidPrice) / precision);\\r\\n            uPnLA = notionalIsolatedA - int256(initialNotionalUsd);\\r\\n        } else {\\r\\n            require(askPrice != 0, \\\"Oracle askPrice is invalid\\\");\\r\\n            int256 notionalIsolatedA = int256((currentBalanceUnits * askPrice) / precision);\\r\\n            uPnLA = int256(initialNotionalUsd) - notionalIsolatedA;\\r\\n        }\\r\\n\\r\\n        return (uPnLA, -uPnLA);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the UPnL of a party across all his open positions.\\r\\n     * @dev This is a naive function, inputs can NOT be trusted. Use cautiously.\\r\\n     * @dev positionPrices can have an incorrect length.\\r\\n     * @dev positionPrices can have an arbitrary order.\\r\\n     * @dev positionPrices can contain forged duplicates.\\r\\n     */\\r\\n    function _calculateUPnLCross(\\r\\n        PositionPrice[] memory positionPrices,\\r\\n        address party\\r\\n    ) private view returns (int256 uPnLCrossA) {\\r\\n        MasterStorage.Layout storage s = MasterStorage.layout();\\r\\n\\r\\n        for (uint256 i = 0; i < positionPrices.length; i++) {\\r\\n            uint256 positionId = positionPrices[i].positionId;\\r\\n            uint256 bidPrice = positionPrices[i].bidPrice;\\r\\n            uint256 askPrice = positionPrices[i].askPrice;\\r\\n\\r\\n            Position memory position = s.allPositionsMap[positionId];\\r\\n            require(position.partyA == party, \\\"PositionId mismatch\\\");\\r\\n\\r\\n            (int256 _uPnLIsolatedA, ) = _calculateUPnLIsolated(\\r\\n                position.side,\\r\\n                position.currentBalanceUnits,\\r\\n                position.initialNotionalUsd,\\r\\n                bidPrice,\\r\\n                askPrice\\r\\n            );\\r\\n\\r\\n            uPnLCrossA += _uPnLIsolatedA;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa19d7633cd55bc10d5e729cf60a23c041d64ca5ad2b55d2147878c96ec8c96d6\",\"license\":\"BUSL-1.1\"},\"contracts/master-agreement/MasterStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport { PositionType, OrderType, HedgerMode, Side } from \\\"../libraries/LibEnums.sol\\\";\\r\\n\\r\\nenum RequestForQuoteState {\\r\\n    NEW,\\r\\n    CANCELED,\\r\\n    ACCEPTED\\r\\n}\\r\\n\\r\\nenum PositionState {\\r\\n    OPEN,\\r\\n    MARKET_CLOSE_REQUESTED,\\r\\n    LIMIT_CLOSE_REQUESTED,\\r\\n    LIMIT_CLOSE_ACTIVE,\\r\\n    CLOSED,\\r\\n    LIQUIDATED\\r\\n    // TODO: add cancel limit close\\r\\n}\\r\\n\\r\\nstruct RequestForQuote {\\r\\n    uint256 creationTimestamp;\\r\\n    uint256 mutableTimestamp;\\r\\n    uint256 rfqId;\\r\\n    RequestForQuoteState state;\\r\\n    PositionType positionType;\\r\\n    OrderType orderType;\\r\\n    address partyA;\\r\\n    address partyB;\\r\\n    HedgerMode hedgerMode;\\r\\n    uint256 marketId;\\r\\n    Side side;\\r\\n    uint256 notionalUsd;\\r\\n    uint256 lockedMarginA;\\r\\n    uint256 protocolFee;\\r\\n    uint256 liquidationFee;\\r\\n    uint256 cva;\\r\\n    uint256 minExpectedUnits;\\r\\n    uint256 maxExpectedUnits;\\r\\n    address affiliate;\\r\\n}\\r\\n\\r\\nstruct Position {\\r\\n    uint256 creationTimestamp;\\r\\n    uint256 mutableTimestamp;\\r\\n    uint256 positionId;\\r\\n    bytes16 uuid;\\r\\n    PositionState state;\\r\\n    PositionType positionType;\\r\\n    uint256 marketId;\\r\\n    address partyA;\\r\\n    address partyB;\\r\\n    Side side;\\r\\n    uint256 lockedMarginA;\\r\\n    uint256 lockedMarginB;\\r\\n    uint256 protocolFeePaid;\\r\\n    uint256 liquidationFee;\\r\\n    uint256 cva;\\r\\n    uint256 currentBalanceUnits;\\r\\n    uint256 initialNotionalUsd;\\r\\n    address affiliate;\\r\\n}\\r\\n\\r\\nlibrary MasterStorage {\\r\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"diamond.standard.master.agreement.storage\\\");\\r\\n\\r\\n    struct Layout {\\r\\n        // Balances\\r\\n        mapping(address => uint256) accountBalances;\\r\\n        mapping(address => uint256) marginBalances;\\r\\n        mapping(address => uint256) crossLockedMargin;\\r\\n        mapping(address => uint256) crossLockedMarginReserved;\\r\\n        // RequestForQuotes\\r\\n        mapping(uint256 => RequestForQuote) requestForQuotesMap;\\r\\n        uint256 requestForQuotesLength;\\r\\n        mapping(address => uint256) crossRequestForQuotesLength;\\r\\n        // Positions\\r\\n        mapping(uint256 => Position) allPositionsMap;\\r\\n        uint256 allPositionsLength;\\r\\n        mapping(address => uint256) openPositionsIsolatedLength;\\r\\n        mapping(address => uint256) openPositionsCrossLength;\\r\\n    }\\r\\n\\r\\n    function layout() internal pure returns (Layout storage l) {\\r\\n        bytes32 slot = STORAGE_SLOT;\\r\\n        assembly {\\r\\n            l.slot := slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf3ffeca951069c7c89d5b812e494a8a05d774bb7e76764975855335b9655c283\",\"license\":\"BUSL-1.1\"},\"contracts/master-agreement/trading/IOpenEvents.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\ninterface IOpenEvents {\\r\\n    event RequestForQuoteNew(uint256 indexed rfqId, address partyA, address partyB);\\r\\n    event RequestForQuoteCanceled(uint256 indexed rfqId, address partyA, address partyB);\\r\\n    event OpenPosition(\\r\\n        uint256 indexed rfqId,\\r\\n        uint256 indexed positionId,\\r\\n        address partyA,\\r\\n        address partyB,\\r\\n        uint256 amountUnits,\\r\\n        uint256 avgPriceUsd\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0x416a218f068f3a3d5aab6d22a8096480b7c58bb07a11a4cca7c620eb42c52afc\",\"license\":\"BUSL-1.1\"},\"contracts/master-agreement/trading/OpenBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport { PositionType, OrderType, HedgerMode, Side } from \\\"../../libraries/LibEnums.sol\\\";\\r\\nimport { MarketsInternal } from \\\"../../markets/MarketsInternal.sol\\\";\\r\\nimport { ConstantsInternal } from \\\"../../constants/ConstantsInternal.sol\\\";\\r\\nimport { MasterStorage, RequestForQuote, RequestForQuoteState, Position, PositionState } from \\\"../MasterStorage.sol\\\";\\r\\nimport { MasterCalculators } from \\\"../MasterCalculators.sol\\\";\\r\\nimport { IOpenEvents } from \\\"./IOpenEvents.sol\\\";\\r\\n\\r\\nabstract contract OpenBase is IOpenEvents {\\r\\n    using MasterStorage for MasterStorage.Layout;\\r\\n\\r\\n    function _onRequestForQuote(\\r\\n        address partyA,\\r\\n        address partyB,\\r\\n        uint256 marketId,\\r\\n        PositionType positionType,\\r\\n        OrderType orderType,\\r\\n        HedgerMode hedgerMode,\\r\\n        Side side,\\r\\n        uint256 usdAmountToSpend,\\r\\n        uint16 leverage,\\r\\n        uint256 minExpectedUnits,\\r\\n        uint256 maxExpectedUnits,\\r\\n        address affiliate\\r\\n    ) internal returns (RequestForQuote memory rfq) {\\r\\n        MasterStorage.Layout storage s = MasterStorage.layout();\\r\\n\\r\\n        // This inherently validates the existence of a market as well.\\r\\n        require(MarketsInternal.isActiveMarket(marketId), \\\"Market not active\\\");\\r\\n\\r\\n        if (positionType == PositionType.CROSS) {\\r\\n            uint256 numOpenPositionsCross = s.openPositionsCrossLength[partyA];\\r\\n            uint256 numOpenRfqsCross = s.crossRequestForQuotesLength[partyA];\\r\\n            require(\\r\\n                numOpenPositionsCross + numOpenRfqsCross < ConstantsInternal.getMaxOpenPositionsCross(),\\r\\n                \\\"Max open positions cross reached\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        require(usdAmountToSpend > 0, \\\"Amount cannot be zero\\\");\\r\\n        uint256 notionalUsd = usdAmountToSpend * leverage;\\r\\n        uint256 protocolFee = MasterCalculators.calculateProtocolFeeAmount(marketId, notionalUsd);\\r\\n        uint256 liquidationFee = MasterCalculators.calculateLiquidationFeeAmount(notionalUsd);\\r\\n        uint256 cva = MasterCalculators.calculateCVAAmount(notionalUsd);\\r\\n        uint256 amount = usdAmountToSpend + protocolFee + liquidationFee + cva;\\r\\n\\r\\n        require(amount <= s.marginBalances[partyA], \\\"Insufficient margin balance\\\");\\r\\n        s.marginBalances[partyA] -= amount;\\r\\n        s.crossLockedMarginReserved[partyA] += amount;\\r\\n\\r\\n        // Create the RFQ\\r\\n        uint256 currentRfqId = s.requestForQuotesLength + 1;\\r\\n        rfq = RequestForQuote({\\r\\n            creationTimestamp: block.timestamp,\\r\\n            mutableTimestamp: block.timestamp,\\r\\n            rfqId: currentRfqId,\\r\\n            state: RequestForQuoteState.NEW,\\r\\n            positionType: positionType,\\r\\n            orderType: orderType,\\r\\n            partyA: partyA,\\r\\n            partyB: partyB,\\r\\n            hedgerMode: hedgerMode,\\r\\n            marketId: marketId,\\r\\n            side: side,\\r\\n            notionalUsd: notionalUsd,\\r\\n            lockedMarginA: usdAmountToSpend,\\r\\n            protocolFee: protocolFee,\\r\\n            liquidationFee: liquidationFee,\\r\\n            cva: cva,\\r\\n            minExpectedUnits: minExpectedUnits,\\r\\n            maxExpectedUnits: maxExpectedUnits,\\r\\n            affiliate: affiliate\\r\\n        });\\r\\n\\r\\n        s.requestForQuotesMap[currentRfqId] = rfq;\\r\\n        s.requestForQuotesLength++;\\r\\n\\r\\n        // Increase the number of active RFQs\\r\\n        if (positionType == PositionType.CROSS) {\\r\\n            s.crossRequestForQuotesLength[partyA]++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _openPositionMarket(\\r\\n        address partyB,\\r\\n        uint256 rfqId,\\r\\n        uint256 filledAmountUnits,\\r\\n        bytes16 uuid,\\r\\n        uint256 lockedMarginB\\r\\n    ) internal returns (Position memory position) {\\r\\n        MasterStorage.Layout storage s = MasterStorage.layout();\\r\\n        RequestForQuote storage rfq = s.requestForQuotesMap[rfqId];\\r\\n\\r\\n        require(rfq.state == RequestForQuoteState.NEW, \\\"Invalid RFQ state\\\");\\r\\n        require(rfq.minExpectedUnits <= filledAmountUnits, \\\"Invalid min filled amount\\\");\\r\\n        require(rfq.maxExpectedUnits >= filledAmountUnits, \\\"Invalid max filled amount\\\");\\r\\n\\r\\n        // Update the RFQ\\r\\n        _updateRequestForQuoteState(rfq, RequestForQuoteState.ACCEPTED);\\r\\n\\r\\n        // Create the Position\\r\\n        uint256 currentPositionId = s.allPositionsLength + 1;\\r\\n        position = Position({\\r\\n            creationTimestamp: block.timestamp,\\r\\n            mutableTimestamp: block.timestamp,\\r\\n            positionId: currentPositionId,\\r\\n            uuid: uuid,\\r\\n            state: PositionState.OPEN,\\r\\n            positionType: rfq.positionType,\\r\\n            marketId: rfq.marketId,\\r\\n            partyA: rfq.partyA,\\r\\n            partyB: rfq.partyB,\\r\\n            side: rfq.side,\\r\\n            lockedMarginA: rfq.lockedMarginA,\\r\\n            lockedMarginB: lockedMarginB,\\r\\n            protocolFeePaid: rfq.protocolFee,\\r\\n            liquidationFee: rfq.liquidationFee,\\r\\n            cva: rfq.cva,\\r\\n            currentBalanceUnits: filledAmountUnits,\\r\\n            initialNotionalUsd: rfq.notionalUsd,\\r\\n            affiliate: rfq.affiliate\\r\\n        });\\r\\n\\r\\n        // Update global mappings\\r\\n        s.allPositionsMap[currentPositionId] = position;\\r\\n        s.allPositionsLength++;\\r\\n\\r\\n        // Transfer partyA's collateral\\r\\n        uint256 deductableMarginA = rfq.lockedMarginA + rfq.protocolFee + rfq.liquidationFee + rfq.cva;\\r\\n        s.crossLockedMarginReserved[rfq.partyA] -= deductableMarginA;\\r\\n\\r\\n        // Transfer partyB's collateral\\r\\n        uint256 deductableMarginB = lockedMarginB + rfq.liquidationFee + rfq.cva; // hedger doesn't pay protocolFee\\r\\n        require(deductableMarginB <= s.marginBalances[partyB], \\\"Insufficient margin balance\\\");\\r\\n        s.marginBalances[partyB] -= deductableMarginB;\\r\\n\\r\\n        // Collect the fee paid by partyA\\r\\n        s.accountBalances[address(this)] += rfq.protocolFee;\\r\\n\\r\\n        if (rfq.positionType == PositionType.ISOLATED) {\\r\\n            s.openPositionsIsolatedLength[rfq.partyA]++;\\r\\n            s.openPositionsIsolatedLength[partyB]++;\\r\\n        } else {\\r\\n            s.openPositionsCrossLength[rfq.partyA]++;\\r\\n            s.openPositionsIsolatedLength[partyB]++;\\r\\n\\r\\n            // Lock margins\\r\\n            s.crossLockedMargin[rfq.partyA] += rfq.lockedMarginA;\\r\\n            s.crossLockedMargin[partyB] += lockedMarginB;\\r\\n\\r\\n            // Decrease the number of active RFQs\\r\\n            s.crossRequestForQuotesLength[rfq.partyA]--;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _updateRequestForQuoteState(RequestForQuote storage rfq, RequestForQuoteState state) internal {\\r\\n        rfq.state = state;\\r\\n        rfq.mutableTimestamp = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function _cancelRequestForQuote(RequestForQuote memory rfq) internal {\\r\\n        MasterStorage.Layout storage s = MasterStorage.layout();\\r\\n\\r\\n        // Return user funds\\r\\n        uint256 reservedMargin = rfq.lockedMarginA + rfq.protocolFee + rfq.liquidationFee + rfq.cva;\\r\\n        s.crossLockedMarginReserved[rfq.partyA] -= reservedMargin;\\r\\n        s.marginBalances[rfq.partyA] += reservedMargin;\\r\\n\\r\\n        // Decrease the number of active RFQs\\r\\n        if (rfq.positionType == PositionType.CROSS) {\\r\\n            s.crossRequestForQuotesLength[rfq.partyA]--;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf18acad9767db47e9926d88978759e95a89b927d2dcb25fff432491d1443ca56\",\"license\":\"BUSL-1.1\"},\"contracts/master-agreement/trading/OpenPosition.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport { OrderType, HedgerMode } from \\\"../../libraries/LibEnums.sol\\\";\\r\\nimport { MasterStorage, RequestForQuote, Position } from \\\"../MasterStorage.sol\\\";\\r\\nimport { OpenBase } from \\\"./OpenBase.sol\\\";\\r\\n\\r\\ncontract OpenPosition is OpenBase {\\r\\n    using MasterStorage for MasterStorage.Layout;\\r\\n\\r\\n    function openPosition(\\r\\n        uint256 rfqId,\\r\\n        uint256 filledAmountUnits,\\r\\n        uint256 avgPriceUsd,\\r\\n        bytes16 uuid,\\r\\n        uint256 lockedMarginB\\r\\n    ) external returns (Position memory position) {\\r\\n        RequestForQuote storage rfq = MasterStorage.layout().requestForQuotesMap[rfqId];\\r\\n\\r\\n        if (rfq.hedgerMode == HedgerMode.SINGLE && rfq.orderType == OrderType.MARKET) {\\r\\n            position = _openPositionMarketSingle(rfq, filledAmountUnits, uuid, lockedMarginB);\\r\\n        } else {\\r\\n            revert(\\\"Other modes not implemented yet\\\");\\r\\n        }\\r\\n\\r\\n        emit OpenPosition(rfq.rfqId, position.positionId, rfq.partyA, rfq.partyB, filledAmountUnits, avgPriceUsd);\\r\\n    }\\r\\n\\r\\n    function _openPositionMarketSingle(\\r\\n        RequestForQuote memory rfq,\\r\\n        uint256 filledAmountUnits,\\r\\n        bytes16 uuid,\\r\\n        uint256 lockedMarginB\\r\\n    ) private returns (Position memory position) {\\r\\n        require(rfq.partyB == msg.sender, \\\"Invalid party\\\");\\r\\n        return _openPositionMarket(msg.sender, rfq.rfqId, filledAmountUnits, uuid, lockedMarginB);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf5dc99b1cbda7c73bc3b94d043555613dd471d25ef49acd51d4f224b07399041\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/OracleStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nstruct SchnorrSign {\\r\\n    uint256 signature;\\r\\n    address owner;\\r\\n    address nonce;\\r\\n}\\r\\n\\r\\nstruct PublicKey {\\r\\n    uint256 x;\\r\\n    uint8 parity;\\r\\n}\\r\\n\\r\\nstruct PositionPrice {\\r\\n    uint256 positionId;\\r\\n    uint256 bidPrice;\\r\\n    uint256 askPrice;\\r\\n}\\r\\n\\r\\nlibrary OracleStorage {\\r\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"diamond.standard.oracle.storage\\\");\\r\\n\\r\\n    struct Layout {\\r\\n        uint256 muonAppId;\\r\\n        bytes muonAppCID;\\r\\n        PublicKey muonPublicKey;\\r\\n        address muonGatewaySigner;\\r\\n        uint256 signatureExpiryPeriod;\\r\\n    }\\r\\n\\r\\n    function layout() internal pure returns (Layout storage l) {\\r\\n        bytes32 slot = STORAGE_SLOT;\\r\\n        assembly {\\r\\n            l.slot := slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcfcbd5c3008065e89ae85f85a2b489ebf873c9e26c5e4b6a460f2144e6b1e0c3\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610cac908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c6372ed04a11461002757600080fd5b34610b845760a0366003190112610b84576064356001600160801b031981168103610b8457610054610bb4565b506004356000527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd10642602052604060002090600482015460ff8160a01c169061009b82610c33565b811580610b67575b15610b225760405191610260830183811067ffffffffffffffff821117610b0c57604052845483526001850154602084015260028501546040840152600385015460ff81166100f181610c33565b606085015260ff8160081c1661010681610b89565b608085015260ff8160101c1661011b81610b89565b60a085015260181c6001600160a01b0390811660c08501529190911660e083019081529061014881610c33565b610100830152600584015461012083015260ff60068501541661016a81610b89565b6101408301526007840154610160830152600884015461018083015260098401546101a0830152600a8401546101c0830152600b8401546101e0830152600c840154610200830152600d840154610220830152600e8401546001600160a01b03166102408301526101d9610bb4565b50516001600160a01b03163303610ad757604001516101f6610bb4565b506000527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd106426020526040600020600381015460ff811661023581610c33565b610a9e57602435600c83015411610a5957602435600d83015410610a1457600260ff1982161760038301554260018301557fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd1064654906001820182116109b95760058301546004840154600685015460088601546009870154600a880154600b89015460078a0154600e8b01546001600160a01b039081169991989297939694959460ff169316916102e3610b93565b42808252602082015260018c0160408201526001600160801b0319909d1660608e0152600060808e0152610323600260ff1984161760081c60ff16610b89565b600260ff199290921691909117600881901c60ff1660a08e015260c08d019190915260181c6001600160a01b031660e08c01526101008b015261036581610b89565b6101208a01526101408901526084356101608901526101808801526101a08701526101c08601526024356101e08601526102008501526102208401526001016000527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd106456020526040600020825181556020830151600182015560408301516002820155606083015160801c600382015490608085015190600682101561086a5760a086015161041381610b89565b61041c81610b89565b60ff60881b9060881b169271ffffffffffffffffffffffffffffffffffff1916179060ff60801b9060801b161717600382015560c08301516004820155600e600582019160018060a01b0360e086015116926bffffffffffffffffffffffff60a01b93848254161790556006810160018060a01b03610100870151168154906101208801516104aa81610b89565b6104b381610b89565b60ff60a01b9060a01b16916affffffffffffffffffffff60a81b16171790556101408501516007820155610160850151600882015561018085015160098201556101a0850151600a8201556101c0850151600b8201556101e0850151600c820155610200850151600d820155019060018060a01b0361022085015116908254161790556105607fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd1064654610c4a565b7fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd10646556105b16105a661059b6008840154600985015490610c3d565b600a84015490610c3d565b600b83015490610c3d565b60018060a01b03600383015460181c166000527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd106416020526105f86040600020918254610c92565b905561060d6105a6600a830154608435610c3d565b3360009081527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd1063f602052604090205481116109cf573360009081527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd1063f6020526040902061067c90918254610c92565b90556009810154306000527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd1063e6020526106bb6040600020918254610c3d565b9055600381015460ff8160081c166106d281610b89565b6108805750600301546106f09060181c6001600160a01b0316610c59565b6106fa8154610c4a565b905561070533610c59565b61070f8154610c4a565b90555b60028201549060408101918251907fe7b85e94e7f1c391d450284b0fec7958893aebe012d801760f6712447c1db8b6608060018060a01b039687600481600384015460181c1692015416604051918252602082015260243560408201526044356060820152a36040519181518352602082015160208401525160408301526fffffffffffffffffffffffffffffffff196060820151166060830152608081015192600684101561086a5761024093608084015260a08201516107d381610b89565b60a084015260c082015160c08401528060e08301511660e084015261010081818401511690840152610120808301519061080c82610b89565b8401526101408083015190840152610160808301519084015261018080830151908401526101a080830151908401526101c080830151908401526101e080830151908401526102008083015190840152610220809201511690820152f35b634e487b7160e01b600052602160045260246000fd5b60181c6001600160a01b031660009081527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd106486020526040902080546108c490610c4a565b90556108cf33610c59565b6108d98154610c4a565b90556008810154600382015460181c6001600160a01b031660009081527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd106406020526040902061092a90918254610c3d565b90553360009081527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd10640602052604090206109676084358254610c3d565b90556003015460181c6001600160a01b031660009081527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd1064460205260409020805480156109b957600019019055610712565b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e74206d617267696e2062616c616e636500000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f496e76616c6964206d61782066696c6c656420616d6f756e74000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f496e76616c6964206d696e2066696c6c656420616d6f756e74000000000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270496e76616c69642052465120737461746560781b6044820152606490fd5b60405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420706172747960981b6044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152601f60248201527f4f74686572206d6f646573206e6f7420696d706c656d656e74656420796574006044820152606490fd5b50600160ff600386015460101c16610b7e81610b89565b146100a3565b600080fd5b6002111561086a57565b60405190610240820182811067ffffffffffffffff821117610b0c57604052565b610bbc610b93565b9060008083528060208401528060408401528060608401528060808401528060a08401528060c08401528060e08401528061010084015280610120840152806101408401528061016084015280610180840152806101a0840152806101c0840152806101e084015280610200840152610220830152565b6003111561086a57565b919082018092116109b957565b60001981146109b95760010190565b6001600160a01b031660009081527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd106476020526040902090565b919082039182116109b95756fea164736f6c6343000810000a",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c6372ed04a11461002757600080fd5b34610b845760a0366003190112610b84576064356001600160801b031981168103610b8457610054610bb4565b506004356000527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd10642602052604060002090600482015460ff8160a01c169061009b82610c33565b811580610b67575b15610b225760405191610260830183811067ffffffffffffffff821117610b0c57604052845483526001850154602084015260028501546040840152600385015460ff81166100f181610c33565b606085015260ff8160081c1661010681610b89565b608085015260ff8160101c1661011b81610b89565b60a085015260181c6001600160a01b0390811660c08501529190911660e083019081529061014881610c33565b610100830152600584015461012083015260ff60068501541661016a81610b89565b6101408301526007840154610160830152600884015461018083015260098401546101a0830152600a8401546101c0830152600b8401546101e0830152600c840154610200830152600d840154610220830152600e8401546001600160a01b03166102408301526101d9610bb4565b50516001600160a01b03163303610ad757604001516101f6610bb4565b506000527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd106426020526040600020600381015460ff811661023581610c33565b610a9e57602435600c83015411610a5957602435600d83015410610a1457600260ff1982161760038301554260018301557fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd1064654906001820182116109b95760058301546004840154600685015460088601546009870154600a880154600b89015460078a0154600e8b01546001600160a01b039081169991989297939694959460ff169316916102e3610b93565b42808252602082015260018c0160408201526001600160801b0319909d1660608e0152600060808e0152610323600260ff1984161760081c60ff16610b89565b600260ff199290921691909117600881901c60ff1660a08e015260c08d019190915260181c6001600160a01b031660e08c01526101008b015261036581610b89565b6101208a01526101408901526084356101608901526101808801526101a08701526101c08601526024356101e08601526102008501526102208401526001016000527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd106456020526040600020825181556020830151600182015560408301516002820155606083015160801c600382015490608085015190600682101561086a5760a086015161041381610b89565b61041c81610b89565b60ff60881b9060881b169271ffffffffffffffffffffffffffffffffffff1916179060ff60801b9060801b161717600382015560c08301516004820155600e600582019160018060a01b0360e086015116926bffffffffffffffffffffffff60a01b93848254161790556006810160018060a01b03610100870151168154906101208801516104aa81610b89565b6104b381610b89565b60ff60a01b9060a01b16916affffffffffffffffffffff60a81b16171790556101408501516007820155610160850151600882015561018085015160098201556101a0850151600a8201556101c0850151600b8201556101e0850151600c820155610200850151600d820155019060018060a01b0361022085015116908254161790556105607fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd1064654610c4a565b7fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd10646556105b16105a661059b6008840154600985015490610c3d565b600a84015490610c3d565b600b83015490610c3d565b60018060a01b03600383015460181c166000527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd106416020526105f86040600020918254610c92565b905561060d6105a6600a830154608435610c3d565b3360009081527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd1063f602052604090205481116109cf573360009081527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd1063f6020526040902061067c90918254610c92565b90556009810154306000527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd1063e6020526106bb6040600020918254610c3d565b9055600381015460ff8160081c166106d281610b89565b6108805750600301546106f09060181c6001600160a01b0316610c59565b6106fa8154610c4a565b905561070533610c59565b61070f8154610c4a565b90555b60028201549060408101918251907fe7b85e94e7f1c391d450284b0fec7958893aebe012d801760f6712447c1db8b6608060018060a01b039687600481600384015460181c1692015416604051918252602082015260243560408201526044356060820152a36040519181518352602082015160208401525160408301526fffffffffffffffffffffffffffffffff196060820151166060830152608081015192600684101561086a5761024093608084015260a08201516107d381610b89565b60a084015260c082015160c08401528060e08301511660e084015261010081818401511690840152610120808301519061080c82610b89565b8401526101408083015190840152610160808301519084015261018080830151908401526101a080830151908401526101c080830151908401526101e080830151908401526102008083015190840152610220809201511690820152f35b634e487b7160e01b600052602160045260246000fd5b60181c6001600160a01b031660009081527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd106486020526040902080546108c490610c4a565b90556108cf33610c59565b6108d98154610c4a565b90556008810154600382015460181c6001600160a01b031660009081527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd106406020526040902061092a90918254610c3d565b90553360009081527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd10640602052604090206109676084358254610c3d565b90556003015460181c6001600160a01b031660009081527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd1064460205260409020805480156109b957600019019055610712565b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e74206d617267696e2062616c616e636500000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f496e76616c6964206d61782066696c6c656420616d6f756e74000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f496e76616c6964206d696e2066696c6c656420616d6f756e74000000000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270496e76616c69642052465120737461746560781b6044820152606490fd5b60405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420706172747960981b6044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152601f60248201527f4f74686572206d6f646573206e6f7420696d706c656d656e74656420796574006044820152606490fd5b50600160ff600386015460101c16610b7e81610b89565b146100a3565b600080fd5b6002111561086a57565b60405190610240820182811067ffffffffffffffff821117610b0c57604052565b610bbc610b93565b9060008083528060208401528060408401528060608401528060808401528060a08401528060c08401528060e08401528061010084015280610120840152806101408401528061016084015280610180840152806101a0840152806101c0840152806101e084015280610200840152610220830152565b6003111561086a57565b919082018092116109b957565b60001981146109b95760010190565b6001600160a01b031660009081527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd106476020526040902090565b919082039182116109b95756fea164736f6c6343000810000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
