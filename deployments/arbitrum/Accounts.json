{
  "address": "0xad9Eadc4850ec65463D0e26cF793Fc5dCc7BFcbC",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AddFreeMarginCross",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "AddFreeMarginIsolated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Allocate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deallocate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveFreeMarginCross",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addFreeMarginCross",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "addFreeMarginIsolated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "allocate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deallocate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deallocateAndWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositAndAllocate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party",
          "type": "address"
        }
      ],
      "name": "getAccountBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party",
          "type": "address"
        }
      ],
      "name": "getLockedMarginCross",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "getLockedMarginIsolated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party",
          "type": "address"
        }
      ],
      "name": "getLockedMarginReserved",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party",
          "type": "address"
        }
      ],
      "name": "getMarginBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeFreeMarginCross",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1adc2b03fc24ad8869794b0f967badd6eb6f4cdc974949579494abec256d707b",
  "receipt": {
    "to": null,
    "from": "0xeB73A6fB886c9e4C01F29da7B239e6E4Db0bf3aF",
    "contractAddress": "0xad9Eadc4850ec65463D0e26cF793Fc5dCc7BFcbC",
    "transactionIndex": 1,
    "gasUsed": "5366241",
    "logsBloom": "0x
    "blockHash": "0x6b56d141215e0a86801da2940dd25321c7ebd23a078c33706efac911230c6916",
    "transactionHash": "0x1adc2b03fc24ad8869794b0f967badd6eb6f4cdc974949579494abec256d707b",
    "logs": [],
    "blockNumber": 48067652,
    "cumulativeGasUsed": "5366241",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d90b29cf48681035a62a283f3cda4c3c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddFreeMarginCross\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"AddFreeMarginIsolated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Allocate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deallocate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveFreeMarginCross\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addFreeMarginCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"addFreeMarginIsolated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deallocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deallocateAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositAndAllocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"}],\"name\":\"getAccountBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"}],\"name\":\"getLockedMarginCross\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getLockedMarginIsolated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"}],\"name\":\"getLockedMarginReserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"}],\"name\":\"getMarginBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeFreeMarginCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/master-agreement/accounts/Accounts.sol\":\"Accounts\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/constants/ConstantsInternal.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport { Decimal } from \\\"../libraries/LibDecimal.sol\\\";\\r\\nimport { ConstantsStorage } from \\\"./ConstantsStorage.sol\\\";\\r\\nimport { IConstantsEvents } from \\\"./IConstantsEvents.sol\\\";\\r\\n\\r\\nlibrary ConstantsInternal {\\r\\n    using ConstantsStorage for ConstantsStorage.Layout;\\r\\n    using Decimal for Decimal.D256;\\r\\n\\r\\n    uint256 private constant PERCENT_BASE = 1e18;\\r\\n    uint256 private constant PRECISION = 1e18;\\r\\n\\r\\n    /* ========== VIEWS ========== */\\r\\n\\r\\n    function getPrecision() internal pure returns (uint256) {\\r\\n        return PRECISION;\\r\\n    }\\r\\n\\r\\n    function getPercentBase() internal pure returns (uint256) {\\r\\n        return PERCENT_BASE;\\r\\n    }\\r\\n\\r\\n    function getCollateral() internal view returns (address) {\\r\\n        return ConstantsStorage.layout().collateral;\\r\\n    }\\r\\n\\r\\n    function getLiquidationFee() internal view returns (Decimal.D256 memory) {\\r\\n        return Decimal.ratio(ConstantsStorage.layout().liquidationFee, PERCENT_BASE);\\r\\n    }\\r\\n\\r\\n    function getProtocolLiquidationShare() internal view returns (Decimal.D256 memory) {\\r\\n        return Decimal.ratio(ConstantsStorage.layout().protocolLiquidationShare, PERCENT_BASE);\\r\\n    }\\r\\n\\r\\n    function getCVA() internal view returns (Decimal.D256 memory) {\\r\\n        return Decimal.ratio(ConstantsStorage.layout().cva, PERCENT_BASE);\\r\\n    }\\r\\n\\r\\n    function getRequestTimeout() internal view returns (uint256) {\\r\\n        return ConstantsStorage.layout().requestTimeout;\\r\\n    }\\r\\n\\r\\n    function getMaxOpenPositionsCross() internal view returns (uint256) {\\r\\n        return ConstantsStorage.layout().maxOpenPositionsCross;\\r\\n    }\\r\\n\\r\\n    /* ========== SETTERS ========== */\\r\\n\\r\\n    function setCollateral(address collateral) internal {\\r\\n        ConstantsStorage.layout().collateral = collateral;\\r\\n    }\\r\\n\\r\\n    function setLiquidationFee(uint256 liquidationFee) internal {\\r\\n        ConstantsStorage.layout().liquidationFee = liquidationFee;\\r\\n    }\\r\\n\\r\\n    function setProtocolLiquidationShare(uint256 protocolLiquidationShare) internal {\\r\\n        ConstantsStorage.layout().protocolLiquidationShare = protocolLiquidationShare;\\r\\n    }\\r\\n\\r\\n    function setCVA(uint256 cva) internal {\\r\\n        ConstantsStorage.layout().cva = cva;\\r\\n    }\\r\\n\\r\\n    function setRequestTimeout(uint256 requestTimeout) internal {\\r\\n        ConstantsStorage.layout().requestTimeout = requestTimeout;\\r\\n    }\\r\\n\\r\\n    function setMaxOpenPositionsCross(uint256 maxOpenPositionsCross) internal {\\r\\n        ConstantsStorage.layout().maxOpenPositionsCross = maxOpenPositionsCross;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2cfd838c49a4c1e59f64b2a006ea74fbfcf98a376350bb0b1130150b9cee5806\",\"license\":\"BUSL-1.1\"},\"contracts/constants/ConstantsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nlibrary ConstantsStorage {\\r\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"diamond.standard.constants.storage\\\");\\r\\n\\r\\n    struct Layout {\\r\\n        address collateral;\\r\\n        uint256 liquidationFee;\\r\\n        uint256 protocolLiquidationShare;\\r\\n        uint256 cva;\\r\\n        uint256 requestTimeout;\\r\\n        uint256 maxOpenPositionsCross;\\r\\n    }\\r\\n\\r\\n    function layout() internal pure returns (Layout storage l) {\\r\\n        bytes32 slot = STORAGE_SLOT;\\r\\n        assembly {\\r\\n            l.slot := slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x95ca5941aa95afe59bee8f04990cb8bcb0eafb0e277a0f53fada8397e53c2baf\",\"license\":\"BUSL-1.1\"},\"contracts/constants/IConstantsEvents.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\ninterface IConstantsEvents {\\r\\n    event SetCollateral(address oldAddress, address newAddress);\\r\\n    event SetLiquidationFee(uint256 oldFee, uint256 newFee);\\r\\n    event SetProtocolLiquidationShare(uint256 oldShare, uint256 newShare);\\r\\n    event SetCVA(uint256 oldCVA, uint256 newCVA);\\r\\n    event SetRequestTimeout(uint256 oldTimeout, uint256 newTimeout);\\r\\n    event SetMaxOpenPositionsCross(uint256 oldMax, uint256 newMax);\\r\\n}\\r\\n\",\"keccak256\":\"0x556ffdc7440aa7317b606497a3ada3e6e71faa64d2ad3da56fd8f6591b289745\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/LibDecimal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Decimal\\r\\n * @author dYdX\\r\\n *\\r\\n * Library that defines a fixed-point number with 18 decimal places.\\r\\n */\\r\\nlibrary Decimal {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // ============ Constants ============\\r\\n\\r\\n    uint256 constant BASE = 10 ** 18;\\r\\n\\r\\n    // ============ Structs ============\\r\\n\\r\\n    struct D256 {\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    // ============ Static Functions ============\\r\\n\\r\\n    function zero() internal pure returns (D256 memory) {\\r\\n        return D256({ value: 0 });\\r\\n    }\\r\\n\\r\\n    function one() internal pure returns (D256 memory) {\\r\\n        return D256({ value: BASE });\\r\\n    }\\r\\n\\r\\n    function from(uint256 a) internal pure returns (D256 memory) {\\r\\n        return D256({ value: a.mul(BASE) });\\r\\n    }\\r\\n\\r\\n    function ratio(uint256 a, uint256 b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: getPartial(a, BASE, b) });\\r\\n    }\\r\\n\\r\\n    // ============ Self Functions ============\\r\\n\\r\\n    function add(D256 memory self, uint256 b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: self.value.add(b.mul(BASE)) });\\r\\n    }\\r\\n\\r\\n    function sub(D256 memory self, uint256 b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: self.value.sub(b.mul(BASE)) });\\r\\n    }\\r\\n\\r\\n    function sub(D256 memory self, uint256 b, string memory reason) internal pure returns (D256 memory) {\\r\\n        return D256({ value: self.value.sub(b.mul(BASE), reason) });\\r\\n    }\\r\\n\\r\\n    function mul(D256 memory self, uint256 b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: self.value.mul(b) });\\r\\n    }\\r\\n\\r\\n    function div(D256 memory self, uint256 b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: self.value.div(b) });\\r\\n    }\\r\\n\\r\\n    function pow(D256 memory self, uint256 b) internal pure returns (D256 memory) {\\r\\n        if (b == 0) {\\r\\n            return one();\\r\\n        }\\r\\n\\r\\n        D256 memory temp = D256({ value: self.value });\\r\\n        for (uint256 i = 1; i < b; ++i) {\\r\\n            temp = mul(temp, self);\\r\\n        }\\r\\n\\r\\n        return temp;\\r\\n    }\\r\\n\\r\\n    function add(D256 memory self, D256 memory b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: self.value.add(b.value) });\\r\\n    }\\r\\n\\r\\n    function sub(D256 memory self, D256 memory b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: self.value.sub(b.value) });\\r\\n    }\\r\\n\\r\\n    function sub(D256 memory self, D256 memory b, string memory reason) internal pure returns (D256 memory) {\\r\\n        return D256({ value: self.value.sub(b.value, reason) });\\r\\n    }\\r\\n\\r\\n    function mul(D256 memory self, D256 memory b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: getPartial(self.value, b.value, BASE) });\\r\\n    }\\r\\n\\r\\n    function div(D256 memory self, D256 memory b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: getPartial(self.value, BASE, b.value) });\\r\\n    }\\r\\n\\r\\n    function equals(D256 memory self, D256 memory b) internal pure returns (bool) {\\r\\n        return self.value == b.value;\\r\\n    }\\r\\n\\r\\n    function greaterThan(D256 memory self, D256 memory b) internal pure returns (bool) {\\r\\n        return compareTo(self, b) == 2;\\r\\n    }\\r\\n\\r\\n    function lessThan(D256 memory self, D256 memory b) internal pure returns (bool) {\\r\\n        return compareTo(self, b) == 0;\\r\\n    }\\r\\n\\r\\n    function greaterThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {\\r\\n        return compareTo(self, b) > 0;\\r\\n    }\\r\\n\\r\\n    function lessThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {\\r\\n        return compareTo(self, b) < 2;\\r\\n    }\\r\\n\\r\\n    function isZero(D256 memory self) internal pure returns (bool) {\\r\\n        return self.value == 0;\\r\\n    }\\r\\n\\r\\n    function asUint256(D256 memory self) internal pure returns (uint256) {\\r\\n        return self.value.div(BASE);\\r\\n    }\\r\\n\\r\\n    // ============ Core Methods ============\\r\\n\\r\\n    function getPartial(uint256 target, uint256 numerator, uint256 denominator) private pure returns (uint256) {\\r\\n        return target.mul(numerator).div(denominator);\\r\\n    }\\r\\n\\r\\n    function compareTo(D256 memory a, D256 memory b) private pure returns (uint256) {\\r\\n        if (a.value == b.value) {\\r\\n            return 1;\\r\\n        }\\r\\n        return a.value > b.value ? 2 : 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfa323074357185fffcd95c964c95e25fbba23f2ac0fd542ea23333721457f3d5\",\"license\":\"MIT\"},\"contracts/libraries/LibEnums.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nenum MarketType {\\r\\n    FOREX,\\r\\n    METALS,\\r\\n    ENERGIES,\\r\\n    INDICES,\\r\\n    STOCKS,\\r\\n    COMMODITIES,\\r\\n    BONDS,\\r\\n    ETFS,\\r\\n    CRYPTO\\r\\n}\\r\\n\\r\\nenum Side {\\r\\n    BUY,\\r\\n    SELL\\r\\n}\\r\\n\\r\\nenum HedgerMode {\\r\\n    SINGLE,\\r\\n    HYBRID,\\r\\n    AUTO\\r\\n}\\r\\n\\r\\nenum OrderType {\\r\\n    LIMIT,\\r\\n    MARKET\\r\\n}\\r\\n\\r\\nenum PositionType {\\r\\n    ISOLATED,\\r\\n    CROSS\\r\\n}\\r\\n\",\"keccak256\":\"0xbedbd913c1366fd4d16201404d7cc37f9e662311ff71e9fff1cd1003ef91f03f\",\"license\":\"BUSL-1.1\"},\"contracts/master-agreement/MasterStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport { PositionType, OrderType, HedgerMode, Side } from \\\"../libraries/LibEnums.sol\\\";\\r\\n\\r\\nenum RequestForQuoteState {\\r\\n    NEW,\\r\\n    CANCELED,\\r\\n    ACCEPTED\\r\\n}\\r\\n\\r\\nenum PositionState {\\r\\n    OPEN,\\r\\n    MARKET_CLOSE_REQUESTED,\\r\\n    LIMIT_CLOSE_REQUESTED,\\r\\n    LIMIT_CLOSE_ACTIVE,\\r\\n    CLOSED,\\r\\n    LIQUIDATED\\r\\n}\\r\\n\\r\\nstruct RequestForQuote {\\r\\n    uint256 creationTimestamp;\\r\\n    uint256 mutableTimestamp;\\r\\n    uint256 rfqId;\\r\\n    RequestForQuoteState state;\\r\\n    PositionType positionType;\\r\\n    OrderType orderType;\\r\\n    address partyA;\\r\\n    address partyB;\\r\\n    HedgerMode hedgerMode;\\r\\n    uint256 marketId;\\r\\n    Side side;\\r\\n    uint256 notionalUsd;\\r\\n    uint256 lockedMarginA;\\r\\n    uint256 protocolFee;\\r\\n    uint256 liquidationFee;\\r\\n    uint256 cva;\\r\\n    uint256 minExpectedUnits;\\r\\n    uint256 maxExpectedUnits;\\r\\n    address affiliate;\\r\\n}\\r\\n\\r\\nstruct Position {\\r\\n    uint256 creationTimestamp;\\r\\n    uint256 mutableTimestamp;\\r\\n    uint256 positionId;\\r\\n    bytes16 uuid;\\r\\n    PositionState state;\\r\\n    PositionType positionType;\\r\\n    uint256 marketId;\\r\\n    address partyA;\\r\\n    address partyB;\\r\\n    Side side;\\r\\n    uint256 lockedMarginA;\\r\\n    uint256 lockedMarginB;\\r\\n    uint256 protocolFeePaid;\\r\\n    uint256 liquidationFee;\\r\\n    uint256 cva;\\r\\n    uint256 currentBalanceUnits;\\r\\n    uint256 initialNotionalUsd;\\r\\n    address affiliate;\\r\\n}\\r\\n\\r\\nlibrary MasterStorage {\\r\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"diamond.standard.master.agreement.storage\\\");\\r\\n\\r\\n    struct Layout {\\r\\n        // Balances\\r\\n        mapping(address => uint256) accountBalances;\\r\\n        mapping(address => uint256) marginBalances;\\r\\n        mapping(address => uint256) crossLockedMargin;\\r\\n        mapping(address => uint256) crossLockedMarginReserved;\\r\\n        // RequestForQuotes\\r\\n        mapping(uint256 => RequestForQuote) requestForQuotesMap;\\r\\n        uint256 requestForQuotesLength;\\r\\n        mapping(address => uint256) crossRequestForQuotesLength;\\r\\n        // Positions\\r\\n        mapping(uint256 => Position) allPositionsMap;\\r\\n        uint256 allPositionsLength;\\r\\n        mapping(address => uint256) openPositionsIsolatedLength;\\r\\n        mapping(address => uint256) openPositionsCrossLength;\\r\\n    }\\r\\n\\r\\n    function layout() internal pure returns (Layout storage l) {\\r\\n        bytes32 slot = STORAGE_SLOT;\\r\\n        assembly {\\r\\n            l.slot := slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x439f652dd38496d2536237e4e8874286203a43b1ae0775aadf23182ad6d3e58d\",\"license\":\"BUSL-1.1\"},\"contracts/master-agreement/accounts/Accounts.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport { AccountsInternal } from \\\"./AccountsInternal.sol\\\";\\r\\nimport { ReentrancyGuard } from \\\"../../security/ReentrancyGuard.sol\\\";\\r\\nimport { IAccountsEvents } from \\\"./IAccountsEvents.sol\\\";\\r\\n\\r\\ncontract Accounts is ReentrancyGuard, IAccountsEvents {\\r\\n    /* ========== VIEWS ========== */\\r\\n\\r\\n    function getAccountBalance(address party) external view returns (uint256) {\\r\\n        return AccountsInternal.getAccountBalance(party);\\r\\n    }\\r\\n\\r\\n    function getMarginBalance(address party) external view returns (uint256) {\\r\\n        return AccountsInternal.getMarginBalance(party);\\r\\n    }\\r\\n\\r\\n    function getLockedMarginIsolated(address party, uint256 positionId) external view returns (uint256) {\\r\\n        return AccountsInternal.getLockedMarginIsolated(party, positionId);\\r\\n    }\\r\\n\\r\\n    function getLockedMarginCross(address party) external view returns (uint256) {\\r\\n        return AccountsInternal.getLockedMarginCross(party);\\r\\n    }\\r\\n\\r\\n    function getLockedMarginReserved(address party) external view returns (uint256) {\\r\\n        return AccountsInternal.getLockedMarginReserved(party);\\r\\n    }\\r\\n\\r\\n    /* ========== WRITES ========== */\\r\\n\\r\\n    function deposit(uint256 amount) external nonReentrant {\\r\\n        AccountsInternal.deposit(msg.sender, amount);\\r\\n        emit Deposit(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 amount) external nonReentrant {\\r\\n        AccountsInternal.withdraw(msg.sender, amount);\\r\\n        emit Withdraw(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function allocate(uint256 amount) external {\\r\\n        AccountsInternal.allocate(msg.sender, amount);\\r\\n        emit Allocate(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function deallocate(uint256 amount) external {\\r\\n        AccountsInternal.deallocate(msg.sender, amount);\\r\\n        emit Deallocate(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function depositAndAllocate(uint256 amount) external nonReentrant {\\r\\n        AccountsInternal.deposit(msg.sender, amount);\\r\\n        AccountsInternal.allocate(msg.sender, amount);\\r\\n\\r\\n        emit Deposit(msg.sender, amount);\\r\\n        emit Allocate(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function deallocateAndWithdraw(uint256 amount) external nonReentrant {\\r\\n        AccountsInternal.deallocate(msg.sender, amount);\\r\\n        AccountsInternal.withdraw(msg.sender, amount);\\r\\n\\r\\n        emit Deallocate(msg.sender, amount);\\r\\n        emit Withdraw(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function addFreeMarginIsolated(uint256 amount, uint256 positionId) external {\\r\\n        AccountsInternal.addFreeMarginIsolated(msg.sender, amount, positionId);\\r\\n        emit AddFreeMarginIsolated(msg.sender, amount, positionId);\\r\\n    }\\r\\n\\r\\n    function addFreeMarginCross(uint256 amount) external {\\r\\n        AccountsInternal.addFreeMarginCross(msg.sender, amount);\\r\\n        emit AddFreeMarginCross(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function removeFreeMarginCross() external {\\r\\n        uint256 removedAmount = AccountsInternal.removeFreeMarginCross(msg.sender);\\r\\n        emit RemoveFreeMarginCross(msg.sender, removedAmount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x914fc462ea9136b00d0e2ff40def482c8072806d5816dbe19047a250492e6ec7\",\"license\":\"BUSL-1.1\"},\"contracts/master-agreement/accounts/AccountsInternal.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { MasterStorage, Position } from \\\"../MasterStorage.sol\\\";\\r\\nimport { ConstantsInternal } from \\\"../../constants/ConstantsInternal.sol\\\";\\r\\n\\r\\nlibrary AccountsInternal {\\r\\n    using MasterStorage for MasterStorage.Layout;\\r\\n\\r\\n    /* ========== VIEWS ========== */\\r\\n\\r\\n    function getAccountBalance(address party) internal view returns (uint256) {\\r\\n        return MasterStorage.layout().accountBalances[party];\\r\\n    }\\r\\n\\r\\n    function getMarginBalance(address party) internal view returns (uint256) {\\r\\n        return MasterStorage.layout().marginBalances[party];\\r\\n    }\\r\\n\\r\\n    function getLockedMarginIsolated(address party, uint256 positionId) internal view returns (uint256) {\\r\\n        MasterStorage.Layout storage s = MasterStorage.layout();\\r\\n        Position storage position = s.allPositionsMap[positionId];\\r\\n\\r\\n        require(position.partyA == party || position.partyB == party, \\\"Invalid party\\\");\\r\\n        return position.partyA == party ? position.lockedMarginA : position.lockedMarginB;\\r\\n    }\\r\\n\\r\\n    function getLockedMarginCross(address party) internal view returns (uint256) {\\r\\n        return MasterStorage.layout().crossLockedMargin[party];\\r\\n    }\\r\\n\\r\\n    function getLockedMarginReserved(address party) internal view returns (uint256) {\\r\\n        return MasterStorage.layout().crossLockedMarginReserved[party];\\r\\n    }\\r\\n\\r\\n    /* ========== WRITES ========== */\\r\\n\\r\\n    function deposit(address party, uint256 amount) internal {\\r\\n        MasterStorage.Layout storage s = MasterStorage.layout();\\r\\n\\r\\n        IERC20 collateral = IERC20(ConstantsInternal.getCollateral());\\r\\n        require(collateral.balanceOf(party) >= amount, \\\"Insufficient collateral balance\\\");\\r\\n\\r\\n        bool success = collateral.transferFrom(party, address(this), amount);\\r\\n        require(success, \\\"Failed to deposit collateral\\\");\\r\\n        s.accountBalances[party] += amount;\\r\\n    }\\r\\n\\r\\n    function withdraw(address party, uint256 amount) internal {\\r\\n        MasterStorage.Layout storage s = MasterStorage.layout();\\r\\n\\r\\n        require(s.accountBalances[party] >= amount, \\\"Insufficient account balance\\\");\\r\\n        s.accountBalances[party] -= amount;\\r\\n        bool success = IERC20(ConstantsInternal.getCollateral()).transfer(party, amount);\\r\\n        require(success, \\\"Failed to withdraw collateral\\\");\\r\\n    }\\r\\n\\r\\n    function allocate(address party, uint256 amount) internal {\\r\\n        MasterStorage.Layout storage s = MasterStorage.layout();\\r\\n\\r\\n        require(s.accountBalances[party] >= amount, \\\"Insufficient account balance\\\");\\r\\n        s.accountBalances[party] -= amount;\\r\\n        s.marginBalances[party] += amount;\\r\\n    }\\r\\n\\r\\n    function deallocate(address party, uint256 amount) internal {\\r\\n        MasterStorage.Layout storage s = MasterStorage.layout();\\r\\n\\r\\n        require(s.marginBalances[party] >= amount, \\\"Insufficient margin balance\\\");\\r\\n        s.marginBalances[party] -= amount;\\r\\n        s.accountBalances[party] += amount;\\r\\n    }\\r\\n\\r\\n    function addFreeMarginIsolated(address party, uint256 amount, uint256 positionId) internal {\\r\\n        MasterStorage.Layout storage s = MasterStorage.layout();\\r\\n        Position storage position = s.allPositionsMap[positionId];\\r\\n\\r\\n        require(s.marginBalances[party] >= amount, \\\"Insufficient margin balance\\\");\\r\\n        s.marginBalances[party] -= amount;\\r\\n\\r\\n        require(position.partyA == party || position.partyB == party, \\\"Invalid party\\\");\\r\\n        if (position.partyA == party) {\\r\\n            position.lockedMarginA += amount;\\r\\n        } else {\\r\\n            position.lockedMarginB += amount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addFreeMarginCross(address party, uint256 amount) internal {\\r\\n        MasterStorage.Layout storage s = MasterStorage.layout();\\r\\n\\r\\n        require(s.marginBalances[party] >= amount, \\\"Insufficient margin balance\\\");\\r\\n        s.marginBalances[party] -= amount;\\r\\n        s.crossLockedMargin[party] += amount;\\r\\n    }\\r\\n\\r\\n    function removeFreeMarginCross(address party) internal returns (uint256 removedAmount) {\\r\\n        MasterStorage.Layout storage s = MasterStorage.layout();\\r\\n\\r\\n        require(s.openPositionsCrossLength[party] == 0, \\\"Removal denied\\\");\\r\\n        require(s.crossLockedMargin[party] > 0, \\\"No locked margin\\\");\\r\\n\\r\\n        uint256 amount = s.crossLockedMargin[party];\\r\\n        s.crossLockedMargin[party] = 0;\\r\\n        s.marginBalances[party] += amount;\\r\\n\\r\\n        return amount;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5b4c1782d21967289e912b9b8ad0c0304a72b83d943571d38be5e9b00d47320d\",\"license\":\"BUSL-1.1\"},\"contracts/master-agreement/accounts/IAccountsEvents.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\ninterface IAccountsEvents {\\r\\n    event Deposit(address indexed party, uint256 amount);\\r\\n    event Withdraw(address indexed party, uint256 amount);\\r\\n    event Allocate(address indexed party, uint256 amount);\\r\\n    event Deallocate(address indexed party, uint256 amount);\\r\\n    event AddFreeMarginIsolated(address indexed party, uint256 amount, uint256 indexed positionId);\\r\\n    event AddFreeMarginCross(address indexed party, uint256 amount);\\r\\n    event RemoveFreeMarginCross(address indexed party, uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0xaa3e07a68341e0593b7e956fb5456709f465b57d01ba292204cd178381c7c5f9\",\"license\":\"BUSL-1.1\"},\"contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport { SecurityStorage } from \\\"./SecurityStorage.sol\\\";\\r\\n\\r\\nabstract contract ReentrancyGuard {\\r\\n    using SecurityStorage for SecurityStorage.Layout;\\r\\n\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    modifier nonReentrant() {\\r\\n        SecurityStorage.Layout storage s = SecurityStorage.layout();\\r\\n\\r\\n        require(s.reentrantStatus != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n        s.reentrantStatus = _ENTERED;\\r\\n        _;\\r\\n        s.reentrantStatus = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x465a7fd11330a622b31d90000fdac8e71942d60da03417be897f195a10cc1842\",\"license\":\"BUSL-1.1\"},\"contracts/security/SecurityStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nlibrary SecurityStorage {\\r\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"diamond.standard.security.storage\\\");\\r\\n\\r\\n    struct Layout {\\r\\n        uint256 reentrantStatus;\\r\\n    }\\r\\n\\r\\n    function layout() internal pure returns (Layout storage l) {\\r\\n        bytes32 slot = STORAGE_SLOT;\\r\\n        assembly {\\r\\n            l.slot := slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf9a68553709a9d68c798a0fc3955f502792b5ffbea30f62869d2835cca7a0393\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610dad908161001c8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c918263091506981461074e575081632e1a7d4d146106dc5781636f6c441f14610690578163783bdd5e146105e95781638a7f1cda146105c357816390ca796b14610577578163918c59e6146104fc57816393423e9c146104b7578163b063a4cb14610419578163b6b55f25146103a7578163cc4a3685146102ac578163dd10ba721461019a578163ddabc862146100ef575063ef9f5785146100bf57600080fd5b346100eb5760203660031901126100eb576020906100e36100de6107a1565b610841565b549051908152f35b5080fd5b9050346101965760203660031901126101965760019035600080516020610d61833981519152906101246002835414156107bc565b600282556101328133610929565b61013c8133610c66565b83518181527fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c60203392a283519081527f249d8eb76d5a22983620d741de2470148d1a9a26ab923aec4262770690d11ebc60203392a25551f35b8280fd5b9050346101965782600319360112610196573383527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd1064860205281832054610279576101e433610808565b541561024457506101f433610808565b54826101ff33610808565b5561020933610841565b610214828254610906565b905581519081527f81f5a294f405837828aff0655910542d082c48d275856ce2eb82d9156f3a78ab60203392a251f35b6020606492519162461bcd60e51b8352820152601060248201526f2737903637b1b5b2b21036b0b933b4b760811b6044820152fd5b6020606492519162461bcd60e51b8352820152600e60248201526d14995b5bdd985b0819195b9a595960921b6044820152fd5b90503461019657816003193601126101965735602435908184527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd10645602052828420610302826102fa33610841565b541015610cc4565b61030b33610841565b610316838254610b42565b905560058101546001600160a01b0390811633149061033e9082908115610397575b5061087a565b1561038257600701610351828254610906565b90555b82519081527f92e573965021fd1f0fa9bf5b3b34ef443dfe559d52c6fc359c31df2a3d6315e060203392a351f35b600801610390828254610906565b9055610354565b6006850154163314905038610338565b9050346101965760203660031901126101965760019035600080516020610d61833981519152906103dc6002835414156107bc565b600282556103ea8133610929565b83519081527fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c60203392a25551f35b5050346100eb57806003193601126100eb576020916104366107a1565b60243582527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd1064584528282209161048b60018060a01b03928380600587015416911680911490819482156104a7575b505061087a565b501561049d5760070154905b51908152f35b6008015490610497565b6006870154161490503880610484565b5050346100eb5760203660031901126100eb5760209181906001600160a01b036104df6107a1565b168152600080516020610d81833981519152845220549051908152f35b905034610196576020366003190112610196573561051d816102fa33610841565b61052633610841565b610531828254610b42565b905561053c33610808565b610547828254610906565b905581519081527feb6c272dce0c25208ae0b9e5bb7b8f0eb111c43e41a4fb9f6812ce8a1b0e7f2a60203392a251f35b90503461019657602036600319011261019657356105958133610c66565b81519081527f249d8eb76d5a22983620d741de2470148d1a9a26ab923aec4262770690d11ebc60203392a251f35b5050346100eb5760203660031901126100eb576020906100e36105e46107a1565b610808565b9050346101965760203660031901126101965760019035600080516020610d618339815191529061061e6002835414156107bc565b6002825561062c8133610d10565b6106368133610b4f565b83518181527fd338c9f6c5eed79757e45cc8cc8b14bce8f5413e34e2dbbe362bc914bf6c439b60203392a283519081527f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436460203392a25551f35b90503461019657602036600319011261019657356106ae8133610d10565b81519081527fd338c9f6c5eed79757e45cc8cc8b14bce8f5413e34e2dbbe362bc914bf6c439b60203392a251f35b9050346101965760203660031901126101965760019035600080516020610d61833981519152906107116002835414156107bc565b6002825561071f8133610b4f565b83519081527f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436460203392a25551f35b84908434610196576020366003190112610196576020926001600160a01b036107756107a1565b1681527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd10641845220548152f35b600435906001600160a01b03821682036107b757565b600080fd5b156107c357565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6001600160a01b031660009081527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd106406020526040902090565b6001600160a01b031660009081527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd1063f6020526040902090565b1561088157565b60405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420706172747960981b6044820152606490fd5b90601f8019910116810190811067ffffffffffffffff8211176108d857604052565b634e487b7160e01b600052604160045260246000fd5b908160209103126107b7575180151581036107b75790565b9190820180921161091357565b634e487b7160e01b600052601160045260246000fd5b7f6153ab96f87058e42029646de88822d1a2d6637639f9e3da153f23d6da9f44af54604080516370a0823160e01b81526001600160a01b0393841660048201819052919360209316908381602481855afa908115610aeb57908691600091610ab8575b5010610a74578260009160648651809481936323b872dd60e01b83528760048401523060248401528a60448401525af1908115610a6957600091610a3c575b50156109f9576109f59291600080516020610d818339815191529160005252600020918254610906565b9055565b50606491519062461bcd60e51b82526004820152601c60248201527f4661696c656420746f206465706f73697420636f6c6c61746572616c000000006044820152fd5b610a5c9150833d8511610a62575b610a5481836108b6565b8101906108ee565b386109cb565b503d610a4a565b84513d6000823e3d90fd5b835162461bcd60e51b815260048101849052601f60248201527f496e73756666696369656e7420636f6c6c61746572616c2062616c616e6365006044820152606490fd5b91508482813d8311610ae4575b610acf81836108b6565b81010312610ae157508590513861098c565b80fd5b503d610ac5565b85513d6000823e3d90fd5b15610afd57565b60405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e74206163636f756e742062616c616e6365000000006044820152606490fd5b9190820391821161091357565b9060018060a01b03809216600091818352600080516020610d818339815191529060446020958387948552610b8a8460408920541015610af6565b858752845260408620610b9e848254610b42565b90557f6153ab96f87058e42029646de88822d1a2d6637639f9e3da153f23d6da9f44af54169385604051958694859363a9059cbb60e01b8552600485015260248401525af1918215610c5a5791610c3d575b5015610bf95750565b6064906040519062461bcd60e51b82526004820152601d60248201527f4661696c656420746f20776974686472617720636f6c6c61746572616c0000006044820152fd5b610c549150823d8411610a6257610a5481836108b6565b38610bf0565b604051903d90823e3d90fd5b610cbc6109f59160018060a01b03811680600052600080516020610d818339815191529081602052610c9f866040600020541015610af6565b6000526020526040600020610cb5858254610b42565b9055610841565b918254610906565b15610ccb57565b60405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e74206d617267696e2062616c616e636500000000006044820152606490fd5b610d1d826102fa83610841565b610d2681610841565b610d31838254610b42565b905560018060a01b0316600052600080516020610d818339815191526020526109f5604060002091825461090656fe634f1ab318df227b41cf077c32da92a01d4f7007a23514871361a6aeab743bfddfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd1063ea164736f6c6343000810000a",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c918263091506981461074e575081632e1a7d4d146106dc5781636f6c441f14610690578163783bdd5e146105e95781638a7f1cda146105c357816390ca796b14610577578163918c59e6146104fc57816393423e9c146104b7578163b063a4cb14610419578163b6b55f25146103a7578163cc4a3685146102ac578163dd10ba721461019a578163ddabc862146100ef575063ef9f5785146100bf57600080fd5b346100eb5760203660031901126100eb576020906100e36100de6107a1565b610841565b549051908152f35b5080fd5b9050346101965760203660031901126101965760019035600080516020610d61833981519152906101246002835414156107bc565b600282556101328133610929565b61013c8133610c66565b83518181527fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c60203392a283519081527f249d8eb76d5a22983620d741de2470148d1a9a26ab923aec4262770690d11ebc60203392a25551f35b8280fd5b9050346101965782600319360112610196573383527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd1064860205281832054610279576101e433610808565b541561024457506101f433610808565b54826101ff33610808565b5561020933610841565b610214828254610906565b905581519081527f81f5a294f405837828aff0655910542d082c48d275856ce2eb82d9156f3a78ab60203392a251f35b6020606492519162461bcd60e51b8352820152601060248201526f2737903637b1b5b2b21036b0b933b4b760811b6044820152fd5b6020606492519162461bcd60e51b8352820152600e60248201526d14995b5bdd985b0819195b9a595960921b6044820152fd5b90503461019657816003193601126101965735602435908184527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd10645602052828420610302826102fa33610841565b541015610cc4565b61030b33610841565b610316838254610b42565b905560058101546001600160a01b0390811633149061033e9082908115610397575b5061087a565b1561038257600701610351828254610906565b90555b82519081527f92e573965021fd1f0fa9bf5b3b34ef443dfe559d52c6fc359c31df2a3d6315e060203392a351f35b600801610390828254610906565b9055610354565b6006850154163314905038610338565b9050346101965760203660031901126101965760019035600080516020610d61833981519152906103dc6002835414156107bc565b600282556103ea8133610929565b83519081527fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c60203392a25551f35b5050346100eb57806003193601126100eb576020916104366107a1565b60243582527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd1064584528282209161048b60018060a01b03928380600587015416911680911490819482156104a7575b505061087a565b501561049d5760070154905b51908152f35b6008015490610497565b6006870154161490503880610484565b5050346100eb5760203660031901126100eb5760209181906001600160a01b036104df6107a1565b168152600080516020610d81833981519152845220549051908152f35b905034610196576020366003190112610196573561051d816102fa33610841565b61052633610841565b610531828254610b42565b905561053c33610808565b610547828254610906565b905581519081527feb6c272dce0c25208ae0b9e5bb7b8f0eb111c43e41a4fb9f6812ce8a1b0e7f2a60203392a251f35b90503461019657602036600319011261019657356105958133610c66565b81519081527f249d8eb76d5a22983620d741de2470148d1a9a26ab923aec4262770690d11ebc60203392a251f35b5050346100eb5760203660031901126100eb576020906100e36105e46107a1565b610808565b9050346101965760203660031901126101965760019035600080516020610d618339815191529061061e6002835414156107bc565b6002825561062c8133610d10565b6106368133610b4f565b83518181527fd338c9f6c5eed79757e45cc8cc8b14bce8f5413e34e2dbbe362bc914bf6c439b60203392a283519081527f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436460203392a25551f35b90503461019657602036600319011261019657356106ae8133610d10565b81519081527fd338c9f6c5eed79757e45cc8cc8b14bce8f5413e34e2dbbe362bc914bf6c439b60203392a251f35b9050346101965760203660031901126101965760019035600080516020610d61833981519152906107116002835414156107bc565b6002825561071f8133610b4f565b83519081527f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436460203392a25551f35b84908434610196576020366003190112610196576020926001600160a01b036107756107a1565b1681527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd10641845220548152f35b600435906001600160a01b03821682036107b757565b600080fd5b156107c357565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6001600160a01b031660009081527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd106406020526040902090565b6001600160a01b031660009081527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd1063f6020526040902090565b1561088157565b60405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420706172747960981b6044820152606490fd5b90601f8019910116810190811067ffffffffffffffff8211176108d857604052565b634e487b7160e01b600052604160045260246000fd5b908160209103126107b7575180151581036107b75790565b9190820180921161091357565b634e487b7160e01b600052601160045260246000fd5b7f6153ab96f87058e42029646de88822d1a2d6637639f9e3da153f23d6da9f44af54604080516370a0823160e01b81526001600160a01b0393841660048201819052919360209316908381602481855afa908115610aeb57908691600091610ab8575b5010610a74578260009160648651809481936323b872dd60e01b83528760048401523060248401528a60448401525af1908115610a6957600091610a3c575b50156109f9576109f59291600080516020610d818339815191529160005252600020918254610906565b9055565b50606491519062461bcd60e51b82526004820152601c60248201527f4661696c656420746f206465706f73697420636f6c6c61746572616c000000006044820152fd5b610a5c9150833d8511610a62575b610a5481836108b6565b8101906108ee565b386109cb565b503d610a4a565b84513d6000823e3d90fd5b835162461bcd60e51b815260048101849052601f60248201527f496e73756666696369656e7420636f6c6c61746572616c2062616c616e6365006044820152606490fd5b91508482813d8311610ae4575b610acf81836108b6565b81010312610ae157508590513861098c565b80fd5b503d610ac5565b85513d6000823e3d90fd5b15610afd57565b60405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e74206163636f756e742062616c616e6365000000006044820152606490fd5b9190820391821161091357565b9060018060a01b03809216600091818352600080516020610d818339815191529060446020958387948552610b8a8460408920541015610af6565b858752845260408620610b9e848254610b42565b90557f6153ab96f87058e42029646de88822d1a2d6637639f9e3da153f23d6da9f44af54169385604051958694859363a9059cbb60e01b8552600485015260248401525af1918215610c5a5791610c3d575b5015610bf95750565b6064906040519062461bcd60e51b82526004820152601d60248201527f4661696c656420746f20776974686472617720636f6c6c61746572616c0000006044820152fd5b610c549150823d8411610a6257610a5481836108b6565b38610bf0565b604051903d90823e3d90fd5b610cbc6109f59160018060a01b03811680600052600080516020610d818339815191529081602052610c9f866040600020541015610af6565b6000526020526040600020610cb5858254610b42565b9055610841565b918254610906565b15610ccb57565b60405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e74206d617267696e2062616c616e636500000000006044820152606490fd5b610d1d826102fa83610841565b610d2681610841565b610d31838254610b42565b905560018060a01b0316600052600080516020610d818339815191526020526109f5604060002091825461090656fe634f1ab318df227b41cf077c32da92a01d4f7007a23514871361a6aeab743bfddfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd1063ea164736f6c6343000810000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
